// Code generated by go-bindata.
// sources:
// assets/module_client.tf
// assets/project/project.tf
// assets/project/terraform.tfvars.example
// assets/s3/iam_role.tf
// assets/s3/iam_user.tf
// assets/s3/policy.s3-principal.tpl
// assets/s3/policy.s3-ro.tpl
// assets/s3/policy.s3-rw.tpl
// assets/s3/s3.tf
// assets/s3/template_file.tf
// assets/s3/terraform.tfstate.backup
// assets/common/.formterra.manifest
// assets/common/Makefile
// assets/rds/rds.tf
// assets/rds/terraform.tfvars.example
// DO NOT EDIT!

package tfproject

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModule_clientTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xb1\x0a\xc2\x40\x10\x44\xfb\x7c\xc5\x70\xc4\x4e\xf2\x01\x42\x6a\x1b\x11\x2b\xfb\x35\xd9\xc4\xc3\x64\x2f\x5c\x2e\x85\x2c\xf7\xef\x6e\x3c\x04\x9b\x65\x60\x1e\xf3\x56\x15\x3d\x0f\x5e\x18\x6e\x0e\xfd\x36\xb1\xcb\xb9\xaa\x4a\x84\x53\x6d\xae\x34\x73\xce\x0e\x5a\x01\x6b\xd8\x62\xc7\x68\xbf\xc5\x25\x74\x34\xed\x27\xf9\x20\x46\x58\x6f\x63\x91\x64\x64\xd4\x2f\x7e\x1f\x51\xcf\xb4\x2c\x5e\x46\x9c\x5a\x34\x67\x4e\x77\x8a\x9e\x1e\x13\xaf\x30\xc7\x4e\xff\x80\xc6\x9a\xe2\x29\xdb\x4b\xf4\x92\x06\xb8\x5a\x0f\xab\xa9\xff\xb1\x1b\xa5\xa7\xc9\xcc\xc4\xd2\xef\x3b\xf6\xad\xaa\x65\x8b\x9f\x00\x00\x00\xff\xff\xa2\x68\xc7\x9a\xcc\x00\x00\x00")

func assetsModule_clientTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsModule_clientTf,
		"assets/module_client.tf",
	)
}

func assetsModule_clientTf() (*asset, error) {
	bytes, err := assetsModule_clientTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/module_client.tf", size: 204, mode: os.FileMode(420), modTime: time.Unix(1480815833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsProjectProjectTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\xbd\x6e\xeb\x30\x0c\x85\x77\x3f\x05\x21\xe4\x6e\x17\x5e\xba\x15\xf0\x50\x74\xe8\xd2\x3f\xb4\x45\xd6\x40\x71\x64\x57\x88\x6d\xb9\x12\x5d\x20\x10\xf4\xee\xa5\x28\xab\x56\x9a\x21\xa0\xa9\x43\x1d\x7e\x3a\x95\xf7\x60\xe5\xd4\x2b\xd8\x7d\x4b\x0b\xb7\x0d\xd4\x0f\x0a\xef\x86\x61\x2f\xad\x0b\xa1\xa2\xa6\x96\xc7\x41\x81\xf0\x3e\x2a\x6a\xea\x3f\xcb\x51\x85\x20\xc0\x03\x0d\xeb\x0e\xd4\x17\x0f\xd7\x1f\x97\x99\x74\x83\x76\x28\x20\x04\x40\xfa\x6c\xd6\x4f\xef\xd5\x74\xa2\x5e\x88\x7e\x54\xd2\x79\x45\xbf\xcd\x7c\x34\xa7\x85\x5c\xa2\xff\x13\x97\x8e\x25\x6b\x3b\x9a\xa7\xb2\xfe\x35\xaf\x00\x9c\x59\x6c\xab\xa0\x29\xcf\x1f\x4d\x2b\x87\xf8\x87\xda\x4c\x24\x24\xd9\xe6\x72\x56\x97\xff\xe4\x25\xe7\x59\x4f\x7d\x34\xcb\x53\xc4\xbc\x5f\x49\xd9\x38\x0e\x65\xdd\x86\x9c\x9c\x66\xab\x27\xec\x40\xec\xfc\x3f\x47\x8b\x94\xb2\x57\x89\x9f\xe4\xb9\x31\x86\x92\xd1\xaa\xd1\x60\x62\x7c\xe3\xf2\xca\xf2\x24\x51\x82\x40\x65\xad\xec\x8c\x1d\x0f\x49\x7d\x70\x28\x51\x09\x26\x4c\x9d\x75\xf6\x9d\xd9\xcb\xd7\x38\xca\xf6\x4c\xb6\x8d\x70\x37\x91\xba\x35\x53\xa7\xfb\x14\x52\x81\x4f\x49\x0d\x0b\x2f\x91\xef\xbb\x4f\x42\xa6\x66\x6e\x92\x65\xd6\xa4\x66\xa4\x1c\x60\xc8\x61\x5e\x07\x68\x16\x9c\x17\x8c\x6c\x2f\x5c\x31\x53\x6a\xf2\x45\xa9\xcc\xbb\xa6\x25\x9a\xf8\x88\x6b\x02\x7f\x13\xae\x8b\x19\x4a\xb1\x74\xcd\xd5\x4f\x00\x00\x00\xff\xff\xf2\x50\x77\xbb\xbc\x02\x00\x00")

func assetsProjectProjectTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsProjectProjectTf,
		"assets/project/project.tf",
	)
}

func assetsProjectProjectTf() (*asset, error) {
	bytes, err := assetsProjectProjectTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/project/project.tf", size: 700, mode: os.FileMode(420), modTime: time.Unix(1480816087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsProjectTerraformTfvarsExample = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x28\x4a\xcc\x4b\x4f\x55\x50\xc9\x4e\xad\xd4\x51\x50\x29\x4b\x2c\x52\xb0\xb2\x55\xd0\x73\x4f\x2d\x71\xcc\xc9\x09\x4b\x2c\x2a\xae\xad\xe5\xaa\xae\x06\x89\xeb\x01\x79\x7e\x89\xb9\xa9\xb5\xb5\xb6\x4a\x4a\x40\x7d\xa9\x79\x29\x0a\x40\x49\x40\x00\x00\x00\xff\xff\x51\xe3\x5a\x00\x42\x00\x00\x00")

func assetsProjectTerraformTfvarsExampleBytes() ([]byte, error) {
	return bindataRead(
		_assetsProjectTerraformTfvarsExample,
		"assets/project/terraform.tfvars.example",
	)
}

func assetsProjectTerraformTfvarsExample() (*asset, error) {
	bytes, err := assetsProjectTerraformTfvarsExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/project/terraform.tfvars.example", size: 66, mode: os.FileMode(420), modTime: time.Unix(1480273459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Iam_roleTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\xed\x92\x86\x05\x6b\x36\x1c\x80\x0b\x20\x64\x4d\x9d\xa9\x6a\xe1\x38\x96\x3d\xc1\x42\x51\xee\x8e\xa7\x29\x41\x15\x54\x49\x59\xb0\xb4\xfd\xe2\xff\xfe\xc4\x9b\x48\xa9\xeb\xa3\x21\x50\x98\x93\xb6\xd8\x6a\xeb\x13\xa3\x37\xa4\x43\xec\x0e\xd6\x91\x02\xc5\x94\x78\x37\x2f\x87\x6a\x03\xe0\xb1\x25\x78\x04\x35\x0c\xf5\x53\x6f\xde\x88\x9f\xcb\xc6\x38\xce\x94\x30\xb1\x73\x94\x0a\xf4\x22\x0b\x00\xb5\x1d\xbe\x32\xe4\xa4\x4e\x0f\xbb\xd8\xd5\x72\xd1\xa8\xee\xae\x23\xf9\x8c\x08\xf1\x5a\x6d\xc6\xaa\x7a\xc7\x68\x71\xef\x8a\xf3\xfe\x14\xad\x05\x28\x5e\xd0\xd0\x01\x7b\xc7\xbf\x79\x4d\xa4\x82\xf2\xf9\xcf\xca\x92\x55\x6a\x9e\x84\xa4\xdf\xf5\x7a\x13\x52\x80\x80\x7c\x14\xe0\x5e\x16\x98\x52\xdf\xd2\xe9\x1a\x1d\x3a\x67\xcd\x87\x1c\x6d\x87\x06\x19\x6b\xa6\x36\x38\x64\xd2\x32\x17\x69\x14\xa2\xf5\xc6\x06\x74\x75\x24\xdf\x50\xa4\xa6\x94\x5b\xf2\xca\xcb\x5e\xf9\xdf\xbc\xa6\xbb\x6e\x9d\xd8\xa2\x40\x79\x0d\xdf\xc9\x00\x2b\xb2\x57\x4f\x65\x39\x3b\xaf\xfa\x1b\xe7\x78\x8d\xcc\x68\x8e\x2d\x79\xbe\x9c\x82\x30\x53\xcc\xd5\xa7\x3e\xeb\x68\x8c\xfe\x92\x9d\xf6\xcf\x74\x39\xfd\x93\x49\x5e\x34\xc9\x37\x99\xe4\xd9\xe4\x33\x00\x00\xff\xff\x70\xaf\xb7\x28\x2d\x04\x00\x00")

func assetsS3Iam_roleTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Iam_roleTf,
		"assets/s3/iam_role.tf",
	)
}

func assetsS3Iam_roleTf() (*asset, error) {
	bytes, err := assetsS3Iam_roleTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/iam_role.tf", size: 1069, mode: os.FileMode(420), modTime: time.Unix(1480196072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Iam_userTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x3d\x4f\xf4\x30\x10\x84\x7b\xff\x8a\x95\xf5\xb6\xaf\x53\x50\xd3\x40\x7f\x1d\xb5\x65\x39\x83\x2e\xba\x7c\xe1\xb5\x89\x22\xcb\xff\x1d\x7f\x28\x82\xe3\x8e\x02\xd2\x65\xc7\xfb\x8c\x77\xbc\x42\xc4\x48\x34\xbc\x92\x7a\x76\x30\x1e\x2f\x0c\x47\x29\x09\x21\x1c\x78\x09\xce\x82\xa4\xd9\x58\x0f\x66\xd2\x21\x6b\x92\x64\x8c\xea\x29\xd8\x0b\xfc\xc9\x4c\x48\x49\x52\x14\x94\xbf\x39\xff\xd1\xe3\xad\x5c\xc5\xd5\xf8\x73\x11\x3b\xde\xd9\x63\xea\xa4\xc8\x16\x4b\xf0\x6b\xf0\x99\x6f\x2d\x98\xf5\x05\x7b\x63\xbd\x9b\x31\x54\xd4\xbf\x78\x58\x7f\x1e\x51\xdf\xf8\x6a\xe8\x53\xa1\x1d\x30\x86\x75\xf0\x7f\x01\xb5\xce\x0a\xbb\x37\xfd\xd7\x5b\xfe\x94\x41\x49\xe8\xda\xaf\x54\x6e\x9c\x4a\x54\xcd\xe7\x7e\xc8\x7a\x5d\xc6\xc1\xee\xda\x78\x6f\xec\x79\xc2\x9c\xe7\x91\x6e\x6b\xd5\xc3\xeb\x97\x66\xb5\xe5\xe0\xba\xf9\xba\xb1\xd5\x15\x3f\xfc\x77\x9b\xca\x6a\xbb\x5c\xde\x0c\x8c\x8c\xba\x0e\x5d\x47\xa7\xa5\x59\x3a\xbc\x05\xe4\x57\xec\xa9\x2d\x0f\xe6\xbe\x1e\xf9\x08\x00\x00\xff\xff\xf3\xb9\xc5\x2d\x4b\x02\x00\x00")

func assetsS3Iam_userTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Iam_userTf,
		"assets/s3/iam_user.tf",
	)
}

func assetsS3Iam_userTf() (*asset, error) {
	bytes, err := assetsS3Iam_userTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/iam_user.tf", size: 587, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3PolicyS3PrincipalTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x3d\xcb\x83\x30\x14\x85\xf7\xfc\x8a\x70\xe7\x57\x51\xdf\xa1\xe0\xe6\xd0\xbd\x54\xe8\x22\x0e\x21\x5c\x21\x90\x8f\x92\x9b\x56\x68\xf0\xbf\x37\x49\xb5\x5d\xce\xf0\x3c\xf7\x9c\x1b\x19\xe7\x70\x43\x4f\xca\x59\xe8\x39\x74\x4d\xdb\x55\x6d\x53\xb5\x27\xf8\xcb\x6a\x0c\x22\xa0\x41\x1b\x92\x9c\x12\xe0\x3c\x96\x4c\xea\xbc\x2c\x28\x33\x87\x41\x6b\xb7\x96\xfb\x22\x06\x19\x3e\x6b\xd3\x4e\x12\xa3\x40\xfd\x40\xf4\x30\x78\x75\x1a\x61\x17\xf3\xb7\x73\xf1\xca\x4a\x75\x17\x3a\xd5\xe2\xaf\x36\xa2\x7f\x2a\x89\xf9\x09\xfd\xd7\xc2\x88\x97\xb3\x62\xa5\x5a\x3a\x73\x6c\x6c\xec\xc8\x99\x6d\x8c\xbd\x03\x00\x00\xff\xff\x70\x95\x0f\xae\xd1\x00\x00\x00")

func assetsS3PolicyS3PrincipalTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3PolicyS3PrincipalTpl,
		"assets/s3/policy.s3-principal.tpl",
	)
}

func assetsS3PolicyS3PrincipalTpl() (*asset, error) {
	bytes, err := assetsS3PolicyS3PrincipalTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/policy.s3-principal.tpl", size: 209, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3PolicyS3RoTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x0a\x4b\x2d\x2a\xce\xcc\xcf\x53\xb2\x52\x50\x32\x32\x30\x34\xd2\x35\x34\xd0\x35\x34\x57\xd2\x01\x49\x05\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x00\x25\xa3\x81\x02\x0a\x0a\xd5\x60\x12\x28\xe5\x9a\x96\x96\x9a\x0c\x12\x57\x72\xcc\xc9\xc9\x2f\x07\xab\x07\x4b\x38\x26\x97\x40\x4c\x8b\x86\x8a\x00\xc5\x8a\x8d\xad\xdc\x53\x4b\xfc\x93\xb2\x40\x5a\x74\x50\xc4\x7d\x32\x8b\xa1\x12\xc5\x58\x64\x9c\x4a\x93\xb3\x53\xb1\x69\x01\x5a\xea\x5b\x09\x91\x2d\x56\x82\xca\xc6\xc2\xdd\x10\x94\x5a\x9c\x5f\x5a\x94\x9c\x8a\xea\x8a\xc4\xa2\x3c\xab\xc4\xf2\x62\x2b\xa0\x11\x56\x56\x2a\xd5\x49\x60\xdd\xf1\x79\x89\xb9\xa9\xb5\xc8\x36\xe0\x51\xa6\xaf\x05\xb7\x0b\x4c\xd7\x72\x81\x58\xb5\x5c\x80\x00\x00\x00\xff\xff\xe7\xb9\xca\xef\x48\x01\x00\x00")

func assetsS3PolicyS3RoTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3PolicyS3RoTpl,
		"assets/s3/policy.s3-ro.tpl",
	)
}

func assetsS3PolicyS3RoTpl() (*asset, error) {
	bytes, err := assetsS3PolicyS3RoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/policy.s3-ro.tpl", size: 328, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3PolicyS3RwTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x0a\x4b\x2d\x2a\xce\xcc\xcf\x53\xb2\x52\x50\x32\x32\x30\x34\xd2\x35\x34\xd0\x35\x34\x57\xd2\x01\x49\x05\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x00\x25\xa3\x81\x02\x0a\x0a\xd5\x60\x12\x28\xe5\x9a\x96\x96\x9a\x0c\x12\x57\x72\xcc\xc9\xc9\x2f\x07\xab\x07\x4b\x38\x26\x97\x40\x4c\x8b\x86\x8a\x20\x80\x52\xb1\xb1\x95\x4b\x6a\x4e\x6a\x49\xaa\x7f\x52\x16\x48\xb7\x0e\x56\x25\xee\xa9\x25\x78\xe5\x7d\x32\x8b\xa1\x0a\x8a\xf1\xa8\x70\x2a\x4d\xce\x4e\xc5\x65\x44\x40\x29\xcc\x0a\xa8\x74\x2c\xdc\xfd\x41\xa9\xc5\xf9\xa5\x45\xc9\xa9\x28\x3e\x50\x4a\x2c\xca\xb3\x4a\x2c\x2f\xb6\x02\xea\xb5\xb2\x52\xa9\x4e\x02\x1b\x1e\x9f\x97\x98\x9b\x5a\x8b\x64\x05\x3e\x65\xfa\x5a\x70\xbb\xc0\x74\x2d\x17\x88\x55\xcb\x05\x08\x00\x00\xff\xff\x6b\xe2\x57\x5c\x84\x01\x00\x00")

func assetsS3PolicyS3RwTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3PolicyS3RwTpl,
		"assets/s3/policy.s3-rw.tpl",
	)
}

func assetsS3PolicyS3RwTpl() (*asset, error) {
	bytes, err := assetsS3PolicyS3RwTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/policy.s3-rw.tpl", size: 388, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3S3Tf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x71\x88\xc1\x20\x0c\x27\x50\x18\xec\xa1\x0f\x5e\xb3\x8d\xc2\x68\x4a\x9b\xee\x65\x0c\xa1\x5a\x67\x47\x44\x91\x3c\xfd\x48\x53\x8c\xfe\xf7\x49\x96\x93\x36\x5d\xd9\x32\x76\x4f\xd2\xdd\xf7\x7d\xf7\xe9\xec\x2b\x0c\x5a\xed\x4d\x8d\x40\xd8\x83\xa5\xf6\x8c\xde\xfb\x7a\x8d\x8e\x00\xe1\xd8\x30\x2f\xe3\xa9\x2f\x20\x46\xce\xc3\x39\x90\xbe\x2f\x3f\x0e\x97\x2b\xb6\xc1\x10\xca\x78\xff\xfc\x93\xab\x10\xc8\x00\x64\xb5\x4c\xa8\xce\x88\x2d\x73\x48\x8a\x62\xc8\xd6\xda\x58\x6a\xbc\xc4\x51\x2e\xe2\xa4\xd4\x0f\xc8\xe9\x0a\x19\x47\x63\x23\xe7\x3b\x99\x90\x1f\x2f\xaa\x1b\x74\x2b\xcd\x73\xf5\xfa\x6e\x49\xde\x91\xeb\xc5\xed\xf2\x37\x98\x36\xa2\x15\x6a\x80\x45\x3b\x17\xb1\x59\x59\xe5\xd2\x22\x57\x42\xd8\x53\x36\x6c\x47\x59\x8b\xd4\x62\xad\xd5\xa0\x7c\x36\x9b\xcd\x86\x62\xc8\x5e\xfb\x1e\x40\x34\xa0\xb4\x83\xf2\x4e\x7d\x8b\xe6\x84\x56\xc8\x21\x84\x51\x62\x9b\x53\x42\xb5\x87\xd7\x00\xa0\x62\xf7\x32\xa2\xce\xc1\x19\x8f\x63\x7a\xcf\x98\x4e\x26\x7b\xe0\x04\xe6\x5a\xb9\xb7\xb0\x46\xec\x80\x19\xed\x15\x4f\xcf\x00\x2d\xf9\x5e\xd8\x42\xa3\x0d\xc6\xcb\x13\x67\xb9\x98\x2f\xa2\xf5\x35\x82\x5b\x09\x1b\xc7\xa9\x1a\xd1\x7a\x93\x5a\x1e\x40\xd3\xf1\x24\x45\x83\xf5\x63\x2d\xf1\x78\xe0\x29\x3a\x83\x8d\xd8\xa5\xef\x93\x15\xa6\xe4\x59\xf1\xd5\x17\xa4\x50\x5a\xd5\xde\x18\x54\x8e\x8e\x0e\xa9\x33\x4c\x59\xe1\xe2\xf1\x48\x3f\x05\x67\x8f\x79\xaa\x2f\xf2\xd6\x69\x93\x06\x5f\x4b\x66\x13\x80\xdc\x2e\xab\xab\x79\x75\x33\xa7\x97\xd5\x73\x1b\xe1\x7f\x3b\xbf\xff\x6b\xe7\x2f\x5f\xab\x8b\xcb\x4f\x37\xff\xd0\x15\x77\x9d\x30\xec\x4f\x5d\x3f\xcc\x5e\x51\x7b\xfa\xa3\x50\x0d\x3f\x50\x4c\x14\xda\xbb\xce\x3b\x20\x79\xa5\xa8\xc1\x36\xca\xe6\x3d\xdb\x32\xe9\x31\x39\x7c\xd3\x1f\xed\x63\x39\x6e\x63\x99\xc1\x71\xd5\xc2\x41\x86\x99\x53\xc9\x11\x79\xc4\x54\x71\x81\x4f\xa4\x0a\x3e\x30\x7f\x05\x00\x00\xff\xff\x30\x79\xcc\xe6\x30\x04\x00\x00")

func assetsS3S3TfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3S3Tf,
		"assets/s3/s3.tf",
	)
}

func assetsS3S3Tf() (*asset, error) {
	bytes, err := assetsS3S3TfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/s3.tf", size: 1072, mode: os.FileMode(420), modTime: time.Unix(1482030279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Template_fileTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xc1\x0a\xc2\x30\x0c\x86\xef\x79\x8a\x10\x3c\xe8\xc1\x5e\x3c\xfb\x2c\x23\xd6\x08\xc5\x6c\x0b\x5d\x74\xc8\xe8\xbb\x3b\x0b\x8a\x97\xc1\x60\xd7\x7e\xdf\x4f\x3f\x72\x65\x67\x24\x97\xd6\x94\x5d\x9a\x5b\x52\x21\xa4\xe1\x74\xcc\x3d\xe1\x04\x88\x5f\x84\x67\xa4\xdd\xf4\xe1\x7b\xb2\x5e\x53\x7c\x85\x6a\x05\x37\xa5\x43\xa1\x59\x7d\x72\x1e\xea\x06\xf1\xf2\x88\x77\xf1\xa6\xe3\x56\xea\x6e\x46\xe1\xef\xad\xea\x05\x0a\x00\x2c\x07\x8c\xab\x02\xc6\x8d\x01\x8b\xff\x5b\x4e\x5d\x4c\xc6\xba\x26\xe3\x27\x6f\x3d\xc7\x3b\x00\x00\xff\xff\xf8\x86\x2f\xf6\x90\x01\x00\x00")

func assetsS3Template_fileTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Template_fileTf,
		"assets/s3/template_file.tf",
	)
}

func assetsS3Template_fileTf() (*asset, error) {
	bytes, err := assetsS3Template_fileTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/template_file.tf", size: 400, mode: os.FileMode(420), modTime: time.Unix(1480196219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3TerraformTfstateBackup = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x6e\x85\x20\x10\x45\xf7\x7e\x85\x61\x2d\x46\x11\x6b\xe9\xaf\x18\x63\xa0\x0c\xad\x89\x8a\x19\xa0\x1b\xe3\xbf\x57\xa9\xf5\xc5\x97\x37\xab\xc9\x39\x77\x6e\x32\x6b\x92\xee\x43\x7e\x00\xdd\x60\x67\xf2\x91\x56\xd9\x1f\xf1\x80\x28\x8d\xc5\xa9\x7f\x38\x52\xe4\x4d\xce\xc9\x99\x70\x80\x83\x1c\x77\xcc\xca\x93\x8c\xc3\x0c\xf2\x0b\x8e\xa4\x34\x6f\xca\xe8\xa6\xa6\x82\x17\x15\xe5\x42\x30\x2a\x94\x62\xd4\x94\xf0\x5e\x73\xc5\x59\xa5\xe1\xbf\x68\xb2\x3a\x8c\xe0\xf6\xb3\x36\x82\x63\xd6\x6b\x8b\x91\x45\xfa\xef\x9b\xbf\x0c\x5a\xeb\xc9\x0d\x77\xd9\xfd\xd6\x06\xbf\x04\x7f\xd4\xaf\xdb\x93\x42\x70\x36\xe0\x27\xbc\x94\x1a\x16\x98\xb5\xeb\xe3\xeb\x6d\x77\xc9\x2d\x6e\x5d\xb2\x25\xbf\x01\x00\x00\xff\xff\x89\xb3\x11\xa3\x3d\x01\x00\x00")

func assetsS3TerraformTfstateBackupBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3TerraformTfstateBackup,
		"assets/s3/terraform.tfstate.backup",
	)
}

func assetsS3TerraformTfstateBackup() (*asset, error) {
	bytes, err := assetsS3TerraformTfstateBackupBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/terraform.tfstate.backup", size: 317, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCommonFormterraManifest = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\x08\x28\xca\x4f\x29\x4d\x4e\x4d\x51\x48\xaa\x54\x48\xcb\x2f\xca\x2d\x49\x2d\x2a\x4a\x54\xa8\xae\x0e\x4b\x2d\x2a\xce\xcc\xcf\xab\xad\x55\xe0\x02\xaa\x72\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\xb6\x02\x4a\x39\xfb\x78\x02\xf9\xc5\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x6e\x15\xb3\x6e\x40\x00\x00\x00")

func assetsCommonFormterraManifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsCommonFormterraManifest,
		"assets/common/.formterra.manifest",
	)
}

func assetsCommonFormterraManifest() (*asset, error) {
	bytes, err := assetsCommonFormterraManifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/common/.formterra.manifest", size: 64, mode: os.FileMode(420), modTime: time.Unix(1480181656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCommonMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\xdf\x6f\xda\x30\x10\x7e\xc6\x7f\xc5\x89\xe6\x81\x54\x0b\x3c\xec\x8d\x2a\xdb\x58\x47\x3b\xd4\xb5\x54\x34\x9b\x36\x69\x12\x72\x93\x0b\x58\x04\x3b\x73\x9c\xb6\xec\xaf\xdf\x39\x0e\x90\x40\x56\x55\x48\x77\xf7\xdd\xf9\xfb\xee\x47\x2e\x60\x96\x82\x59\xa3\x46\x10\x05\x70\x30\xa8\x35\x4f\x95\xde\x0e\x4d\xfa\xc2\x75\xc1\x2e\xa0\x2c\x90\x10\xdc\x00\x2f\x8e\x61\x10\x32\x2f\x0d\x45\x35\xb7\xd9\x16\x20\x21\xc1\x1c\x65\x02\x4a\x02\xca\x17\xa1\x95\xdc\xa2\x34\x40\x65\x04\x7f\xce\xb0\x00\xa5\x6d\x31\x5d\xe7\x46\x37\xcb\x1f\x93\xc5\x72\xb2\xb8\x7d\x82\x8f\x21\x13\xa9\xc4\x3f\x30\xf0\x06\xaf\x22\x4b\x62\xae\x13\xf0\x06\x35\xe4\x66\xf6\x6d\xea\xfb\xef\xfc\x66\x4a\x18\x04\x54\x38\x48\x45\x86\x61\x1b\xc8\x88\x83\x48\x99\x05\x5b\xfb\x29\x6c\x94\xbc\x24\x59\x3e\x63\xac\x92\xbd\x53\x25\x51\x4e\x85\x44\x12\xfe\x5c\xc6\x1b\x34\x20\xf9\x96\x2c\x12\x51\xdb\xb9\x26\xc0\x1b\xe1\x79\x96\x01\x95\xc9\x88\x7c\x9c\x95\x09\x42\x61\x94\x16\x72\x05\x2a\xad\x1a\x08\x1a\xb7\xca\x58\x37\x37\x48\xf8\x5c\x93\x15\x1b\x4c\x28\x8b\x9a\x03\xb0\x2a\x89\x00\x63\x8b\xe9\xfd\x3c\x9a\x2e\x67\x0f\xb3\xa8\xa2\x07\x61\x9d\xb9\xac\x32\x87\xe6\xcd\xec\x31\x4f\xd1\x84\x7e\x3f\x7f\xbf\xbe\x9b\x46\xb6\x43\x2d\xf7\xe3\x62\x7a\x33\xfb\x79\xe6\x76\xe8\xe5\x62\x7a\x3b\x9b\x3f\xd8\x28\x51\x89\xe6\x5f\xe6\x90\x8a\x55\xa9\x51\x41\x69\x60\xad\x5e\xc1\x28\xfb\x9f\x28\xab\xf5\xd8\xfa\x8e\x52\xb6\xed\x8c\xc4\x8f\xe1\x10\x3e\x70\xf7\x21\xcf\xb8\x64\x0c\xb3\x02\x6b\x50\xed\x70\x13\xa0\xbf\xe1\xe3\xd7\xf9\xc3\x2f\xe7\x27\xa1\xa9\xc6\x62\x0d\x3c\xcf\xb3\x1d\xc4\x19\x5a\xec\xf0\xb0\x53\x63\x37\xf1\x6a\x68\x3e\xeb\x1d\x77\x6d\x45\x83\x08\x82\x32\x4f\x6c\x6b\x7b\xe4\x02\x41\x63\x00\xcf\x1b\x64\x05\x1c\xf3\x47\x5b\x95\x94\xb4\x67\xa3\xcb\xd1\x3d\xdf\xa0\x5d\x0d\xff\xca\x6a\x14\x21\x41\x13\xa1\xab\xe1\x7a\x9e\x20\x2f\xc6\x6b\x05\xfd\x48\xef\xec\x08\xb7\x84\x76\x05\x45\xff\xca\x59\xc1\xb5\xb5\x6c\xb6\x24\x69\x96\x7d\x8b\x5d\xe3\xd5\x26\xd1\x4a\x65\xa0\xa8\xc7\xcd\x3b\xaa\xbc\x87\x1d\xb5\xcb\x4b\x2d\xad\x7b\x31\x6e\xa6\xef\xfb\x73\x8a\x3d\x2d\xf6\x7f\x2a\xde\xe0\x7e\x72\x77\x98\x4b\xd5\xe7\xf1\x19\x97\xe6\x93\x6e\x14\x67\x08\x56\x0d\xa7\x45\x2e\xc1\xc2\x68\xb5\x83\x80\xac\x18\x4f\x39\xf6\x08\x11\xe8\xb4\x45\xa6\x76\x35\x8b\xbb\xeb\xe8\x8a\xb8\x67\x3b\x76\x8c\x48\x7c\x72\xd3\x12\x52\x18\xc1\x33\x51\xb4\x8f\xcd\xce\xb9\xdf\x6e\x63\x15\x8c\x95\xa4\xa5\x87\xe0\x99\xd3\x25\xcb\x24\x2c\xde\xc3\x6f\xd6\xdb\x9b\x81\x0b\x87\x7d\x77\xe8\x61\xf7\xf2\xf7\x3b\x53\x36\xb8\x3b\xc5\xbb\x73\xf4\x47\x67\x62\xbb\x2b\x68\x5c\x09\x25\xbb\x1f\xad\x8f\xd7\x27\x4d\x4e\x77\x53\x2c\xec\x9b\xf0\xb7\xfe\xb2\x40\x37\xf1\xea\x1b\xd6\xcd\xb1\x0f\x1f\xba\x6e\x99\xfd\x0b\x00\x00\xff\xff\x9e\x51\x78\x55\x0b\x06\x00\x00")

func assetsCommonMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsCommonMakefile,
		"assets/common/Makefile",
	)
}

func assetsCommonMakefile() (*asset, error) {
	bytes, err := assetsCommonMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/common/Makefile", size: 1547, mode: os.FileMode(420), modTime: time.Unix(1482023041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRdsRdsTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\xcf\x8e\xd4\x30\x0c\xc6\xef\x7d\x8a\xa8\x70\xa5\x0b\x8b\xe0\xb6\xb7\x3d\xb3\x17\x6e\x08\x45\x6e\xe2\x4e\x23\xd2\xa4\xc4\xc9\x8c\x4a\xd5\x77\x27\x6d\x13\xfa\x67\x16\xed\x1c\x46\x33\xf1\xcf\x9f\x3f\x27\x76\x71\x05\xa7\xa0\xd6\xc8\xca\x40\xe8\x0c\x74\x58\xb2\xb1\x60\x4c\x62\x03\x41\x7b\xf6\xc4\x4a\x67\xad\x2f\x8b\x69\x87\x76\x31\xa2\x38\xfc\x39\xa3\xde\x05\x8c\xe0\x8e\x94\x35\xa7\x50\x1b\xf4\xfc\xe2\x6c\xe8\x79\x2a\x30\x9d\x10\x14\xc1\x29\x3f\xac\xd0\x12\xdf\x8b\xf4\x40\x74\xb3\x4e\x9e\x12\x49\xb4\xd8\xc1\x2a\x79\x08\xa0\xb9\x28\x73\xdf\x47\x37\xd0\x6f\x7d\x6c\x64\x25\xf9\x15\x1d\x29\x6b\xee\x32\xbe\x54\x5f\xab\xc7\xcf\xc7\x14\x65\xc8\x83\x11\xc8\x85\x8e\xb6\xee\x52\x64\x5d\xf9\xc7\xaa\x53\xc2\xd9\x39\xaf\x28\xde\xb1\x67\xf0\x50\x03\x21\xcb\xa9\x85\x43\xb2\xc1\x89\xa8\x06\x37\xe2\xf1\x02\x72\xa4\x8c\x02\xab\xd6\x2a\xcc\x18\x68\x6d\x05\x78\x94\x9c\xbc\x75\x70\xc1\x58\xe4\xd3\xc7\x25\xb4\x9a\x9f\x8b\xbe\x1f\xa3\xbf\x6a\xfd\x3f\x95\xbb\x60\xee\xec\x0c\xe5\xf3\x04\x2b\x89\xc6\xab\x46\xa1\x9b\xc1\x71\xac\xb2\xe5\x6f\xf1\x6e\xa7\x0c\x1d\x1a\xdf\x14\x8f\xe7\x09\x7e\x78\xf8\xfe\xf2\xfc\xc2\x1a\x75\x09\x0e\x99\x0d\x9e\xdd\x5a\xf0\xcc\xb7\xc8\x5a\x14\xbf\xe2\x0f\x45\xac\x43\x30\xb4\xe0\x8d\x32\xa0\x39\x19\xe8\xa9\xb5\x9e\xbf\xe1\xe7\xc3\x82\xaf\x85\xfa\x50\x6b\x25\xf4\xc0\x41\x08\x24\x52\xf3\x1b\x3d\xb1\x06\x34\xe1\x12\x7f\x6d\x00\x37\xef\xaf\x45\x53\x07\xd7\x5e\x9c\xe6\x32\xda\x9a\xdb\xfe\xb1\x84\xe7\xcf\x4e\xe4\x00\x26\x85\x9f\xcb\x77\xde\x95\xad\x68\x3e\x89\xd8\x42\xec\x26\x44\xa2\x07\xa5\xd7\x3b\xc9\x4e\xff\xf3\x1c\x79\x5d\x37\xdd\x7c\x92\x80\xbc\x35\x1b\x90\x4f\x72\x61\xad\x1a\x14\x83\x88\x37\x36\xfe\xeb\x49\x38\x8c\xd3\xc6\x6b\x6c\xac\x43\x2e\x91\xbc\xb3\x43\x5e\xed\x19\x98\xe6\xa9\x8e\x0f\xda\xc7\x37\x2d\x65\x32\xc6\x41\xca\x38\xd4\x69\x1d\xae\xa0\x43\xf2\x75\x9a\xef\x2a\x4d\x77\x95\xf8\x69\xde\x91\xbf\x01\x00\x00\xff\xff\xc5\xa2\x58\xb9\x84\x04\x00\x00")

func assetsRdsRdsTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsRdsRdsTf,
		"assets/rds/rds.tf",
	)
}

func assetsRdsRdsTf() (*asset, error) {
	bytes, err := assetsRdsRdsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/rds/rds.tf", size: 1156, mode: os.FileMode(420), modTime: time.Unix(1480901091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRdsTerraformTfvarsExample = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x2c\x2e\x2e\xcf\x2f\x4a\xb1\x55\x52\xe2\x2a\x4e\xce\x48\xcd\x4d\x8c\xcf\x4b\xcc\x4d\x05\x71\x01\x01\x00\x00\xff\xff\x98\x09\x29\x00\x1b\x00\x00\x00")

func assetsRdsTerraformTfvarsExampleBytes() ([]byte, error) {
	return bindataRead(
		_assetsRdsTerraformTfvarsExample,
		"assets/rds/terraform.tfvars.example",
	)
}

func assetsRdsTerraformTfvarsExample() (*asset, error) {
	bytes, err := assetsRdsTerraformTfvarsExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/rds/terraform.tfvars.example", size: 27, mode: os.FileMode(420), modTime: time.Unix(1480893709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/module_client.tf": assetsModule_clientTf,
	"assets/project/project.tf": assetsProjectProjectTf,
	"assets/project/terraform.tfvars.example": assetsProjectTerraformTfvarsExample,
	"assets/s3/iam_role.tf": assetsS3Iam_roleTf,
	"assets/s3/iam_user.tf": assetsS3Iam_userTf,
	"assets/s3/policy.s3-principal.tpl": assetsS3PolicyS3PrincipalTpl,
	"assets/s3/policy.s3-ro.tpl": assetsS3PolicyS3RoTpl,
	"assets/s3/policy.s3-rw.tpl": assetsS3PolicyS3RwTpl,
	"assets/s3/s3.tf": assetsS3S3Tf,
	"assets/s3/template_file.tf": assetsS3Template_fileTf,
	"assets/s3/terraform.tfstate.backup": assetsS3TerraformTfstateBackup,
	"assets/common/.formterra.manifest": assetsCommonFormterraManifest,
	"assets/common/Makefile": assetsCommonMakefile,
	"assets/rds/rds.tf": assetsRdsRdsTf,
	"assets/rds/terraform.tfvars.example": assetsRdsTerraformTfvarsExample,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"common": &bintree{nil, map[string]*bintree{
			".formterra.manifest": &bintree{assetsCommonFormterraManifest, map[string]*bintree{}},
			"Makefile": &bintree{assetsCommonMakefile, map[string]*bintree{}},
		}},
		"module_client.tf": &bintree{assetsModule_clientTf, map[string]*bintree{}},
		"project": &bintree{nil, map[string]*bintree{
			"project.tf": &bintree{assetsProjectProjectTf, map[string]*bintree{}},
			"terraform.tfvars.example": &bintree{assetsProjectTerraformTfvarsExample, map[string]*bintree{}},
		}},
		"rds": &bintree{nil, map[string]*bintree{
			"rds.tf": &bintree{assetsRdsRdsTf, map[string]*bintree{}},
			"terraform.tfvars.example": &bintree{assetsRdsTerraformTfvarsExample, map[string]*bintree{}},
		}},
		"s3": &bintree{nil, map[string]*bintree{
			"iam_role.tf": &bintree{assetsS3Iam_roleTf, map[string]*bintree{}},
			"iam_user.tf": &bintree{assetsS3Iam_userTf, map[string]*bintree{}},
			"policy.s3-principal.tpl": &bintree{assetsS3PolicyS3PrincipalTpl, map[string]*bintree{}},
			"policy.s3-ro.tpl": &bintree{assetsS3PolicyS3RoTpl, map[string]*bintree{}},
			"policy.s3-rw.tpl": &bintree{assetsS3PolicyS3RwTpl, map[string]*bintree{}},
			"s3.tf": &bintree{assetsS3S3Tf, map[string]*bintree{}},
			"template_file.tf": &bintree{assetsS3Template_fileTf, map[string]*bintree{}},
			"terraform.tfstate.backup": &bintree{assetsS3TerraformTfstateBackup, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

