// Code generated by go-bindata.
// sources:
// assets/module_client.tf
// assets/project/project.tf
// assets/project/terraform.tfvars.example
// assets/s3/iam_role.tf
// assets/s3/iam_user.tf
// assets/s3/policy.s3-principal.tpl
// assets/s3/policy.s3-ro.tpl
// assets/s3/policy.s3-rw.tpl
// assets/s3/s3.tf
// assets/s3/template_file.tf
// assets/s3/terraform.tfstate.backup
// assets/common/.formterra.manifest
// assets/common/Makefile
// DO NOT EDIT!

package tfproject

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModule_clientTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xc1\xca\xc2\x30\x10\x84\xef\x7d\x8a\x21\xf4\xbf\xfd\xf4\x01\x84\x9e\xc5\x8b\x88\xa0\xf7\xd5\x6e\x6b\xb0\x49\x43\x92\x1e\x64\xc9\xbb\xbb\x35\x08\xde\x86\x9d\xe1\xfb\x56\x04\x03\x8f\xd6\x33\x8c\x5b\x86\x75\x66\x53\x4a\xd3\xd4\x08\x23\xd2\x1d\xc9\x71\x29\x06\xd2\x00\x69\x59\xe3\x9d\xd1\x7f\x8a\xcb\xf9\xa0\x77\xbd\x2a\x22\x92\x9f\x18\xed\x93\x5f\xff\x68\x1d\x85\x60\xfd\x84\x5d\x8f\x6e\xcf\xf9\x4a\xd1\xd2\x6d\xe6\x04\x25\x6f\xeb\xef\xa0\xd3\xa6\xd2\x2b\x31\x44\xeb\xf3\x08\xd3\xca\x5f\x52\xe1\xef\xec\x44\xf9\xa1\x32\x35\xb1\x1f\x36\x8e\xfe\x28\xa2\x59\xe3\x3b\x00\x00\xff\xff\x66\xe6\x33\x70\xc2\x00\x00\x00")

func assetsModule_clientTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsModule_clientTf,
		"assets/module_client.tf",
	)
}

func assetsModule_clientTf() (*asset, error) {
	bytes, err := assetsModule_clientTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/module_client.tf", size: 194, mode: os.FileMode(420), modTime: time.Unix(1479946795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsProjectProjectTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xcf\x8e\x82\x30\x10\xc6\xef\x7d\x8a\x2f\x84\xbd\x6d\x78\x80\x4d\x38\xec\x69\xb3\x07\x8d\x31\x91\xfb\x28\x23\x12\xa1\x90\x16\x4c\x4c\xd3\x77\x77\xca\x1f\x41\xed\xa9\x99\xf9\xcd\xef\x9b\x51\xce\xc1\x90\x2e\x18\xf1\x95\xef\xdf\x88\x6f\x64\xf0\x93\x22\xf9\xe3\xee\xb7\xaa\x32\x32\xd6\x7b\x25\xc5\x92\x8e\x15\x23\x72\x2e\x10\x89\xd4\xb7\x54\xb3\xf7\x11\x1c\x7c\x90\xb0\xce\x21\xa4\xbc\x77\x63\xdd\xe4\xbd\x8c\x06\xe9\x66\xf8\xda\x01\x9c\xca\xc1\x38\x7e\x93\xa7\x51\x01\xb6\xe9\xcd\x89\x91\xae\xfb\x87\xfd\xbf\xb4\xa5\xf9\x91\x40\x6d\x5b\xea\x22\x44\xcc\xac\xac\x9f\x4d\x4b\x0f\x71\x61\x68\xe6\x96\xed\x47\x7f\x6b\x4a\xdd\x9d\x11\xc5\xee\xcb\x4a\xfc\x1a\xdb\x51\x77\x91\xcc\xe5\x3e\xaf\x5e\x8e\x7d\x04\x00\x00\xff\xff\xd4\xe3\x29\xd0\x3f\x01\x00\x00")

func assetsProjectProjectTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsProjectProjectTf,
		"assets/project/project.tf",
	)
}

func assetsProjectProjectTf() (*asset, error) {
	bytes, err := assetsProjectProjectTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/project/project.tf", size: 319, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsProjectTerraformTfvarsExample = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x28\x4a\xcc\x4b\x4f\x55\x50\xc9\x4e\xad\xd4\x51\x50\x29\x4b\x2c\x52\xb0\xb2\x55\xd0\x73\x4f\x2d\x71\xcc\xc9\x09\x4b\x2c\x2a\xae\xad\xe5\xaa\xae\x06\x89\xeb\x01\x79\x7e\x89\xb9\xa9\xb5\xb5\xb6\x4a\x4a\x40\x7d\xa9\x79\x29\x0a\x40\x49\x40\x00\x00\x00\xff\xff\x51\xe3\x5a\x00\x42\x00\x00\x00")

func assetsProjectTerraformTfvarsExampleBytes() ([]byte, error) {
	return bindataRead(
		_assetsProjectTerraformTfvarsExample,
		"assets/project/terraform.tfvars.example",
	)
}

func assetsProjectTerraformTfvarsExample() (*asset, error) {
	bytes, err := assetsProjectTerraformTfvarsExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/project/terraform.tfvars.example", size: 66, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Iam_roleTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x92\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\xed\x92\x86\x05\x6b\x36\x1c\x80\x0b\x20\x64\x4d\x9d\xa9\x6a\xe1\x38\x96\xed\x60\xa1\x28\x77\xc7\x93\x84\xa0\x0a\xd2\xa4\x2c\x58\xda\x7e\x9d\xff\xfe\x34\x3b\x4f\xa1\x69\xbd\x22\x10\x98\x82\xd4\x58\x4b\x6d\x43\x44\xab\x48\x3a\xdf\x9c\xb4\x21\x01\x22\x52\x88\x87\xf9\xd8\x15\x3b\x00\x8b\x35\xc1\x23\x88\xae\x2b\x9f\x5a\xf5\x46\xf1\x39\x5f\xf4\xfd\x4c\x31\xe3\x1b\x43\x21\x43\x2f\x7c\x00\x10\xfb\xee\x2b\x83\x5f\xca\xf0\x70\xf0\x4d\xc9\x83\x7a\x71\xb7\x8c\xa4\x09\x61\xe2\xb5\xd8\xf5\x45\xf1\x8e\x5e\xe3\xd1\x64\xe7\xe3\x10\x2d\x19\xc8\x5e\x50\xd1\x09\x5b\x13\x7f\xf3\x1a\x49\x01\xf9\xe7\x3f\x2b\x73\x56\xae\x39\x08\x71\xbf\xe5\x7a\x23\x92\x01\x87\xf1\xcc\xc0\x3d\x1f\x30\x84\xb6\xa6\x61\x8c\x74\x8d\xd1\xea\x83\x9f\xf6\x5d\xa4\xda\x19\x8c\x24\x79\x25\x5c\xc6\x79\x6d\x95\x76\x68\x4a\x4f\xb6\x22\x4f\x55\xee\xb5\xa6\x94\xd6\x95\xd2\x7f\x28\x8d\x63\x6e\xdd\xd3\xb5\xec\xfc\xf7\x7f\x87\x02\x6c\x88\xdd\xbc\x8b\xab\xb1\x69\xd3\xfa\xa7\x64\x89\x31\xa2\x3a\xd7\x64\xe3\x65\x77\x66\xc6\x84\xc5\xcf\x7a\x36\x91\xe8\xed\x25\x3b\xde\x4f\x74\x7e\xfd\x93\x49\x5a\x35\x49\x37\x99\xa4\xd9\xe4\x33\x00\x00\xff\xff\x75\xb7\xd0\x05\x19\x04\x00\x00")

func assetsS3Iam_roleTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Iam_roleTf,
		"assets/s3/iam_role.tf",
	)
}

func assetsS3Iam_roleTf() (*asset, error) {
	bytes, err := assetsS3Iam_roleTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/iam_role.tf", size: 1049, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Iam_userTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x3d\x4f\xf4\x30\x10\x84\x7b\xff\x8a\x95\xf5\xb6\xaf\x53\x50\xd3\x40\x7f\x1d\xb5\x65\x39\x83\x2e\xba\x7c\xe1\xb5\x89\x22\xcb\xff\x1d\x7f\x28\x82\xe3\x8e\x02\xd2\x65\xc7\xfb\x8c\x77\xbc\x42\xc4\x48\x34\xbc\x92\x7a\x76\x30\x1e\x2f\x0c\x47\x29\x09\x21\x1c\x78\x09\xce\x82\xa4\xd9\x58\x0f\x66\xd2\x21\x6b\x92\x64\x8c\xea\x29\xd8\x0b\xfc\xc9\x4c\x48\x49\x52\x14\x94\xbf\x39\xff\xd1\xe3\xad\x5c\xc5\xd5\xf8\x73\x11\x3b\xde\xd9\x63\xea\xa4\xc8\x16\x4b\xf0\x6b\xf0\x99\x6f\x2d\x98\xf5\x05\x7b\x63\xbd\x9b\x31\x54\xd4\xbf\x78\x58\x7f\x1e\x51\xdf\xf8\x6a\xe8\x53\xa1\x1d\x30\x86\x75\xf0\x7f\x01\xb5\xce\x0a\xbb\x37\xfd\xd7\x5b\xfe\x94\x41\x49\xe8\xda\xaf\x54\x6e\x9c\x4a\x54\xcd\xe7\x7e\xc8\x7a\x5d\xc6\xc1\xee\xda\x78\x6f\xec\x79\xc2\x9c\xe7\x91\x6e\x6b\xd5\xc3\xeb\x97\x66\xb5\xe5\xe0\xba\xf9\xba\xb1\xd5\x15\x3f\xfc\x77\x9b\xca\x6a\xbb\x5c\xde\x0c\x8c\x8c\xba\x0e\x5d\x47\xa7\xa5\x59\x3a\xbc\x05\xe4\x57\xec\xa9\x2d\x0f\xe6\xbe\x1e\xf9\x08\x00\x00\xff\xff\xf3\xb9\xc5\x2d\x4b\x02\x00\x00")

func assetsS3Iam_userTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Iam_userTf,
		"assets/s3/iam_user.tf",
	)
}

func assetsS3Iam_userTf() (*asset, error) {
	bytes, err := assetsS3Iam_userTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/iam_user.tf", size: 587, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3PolicyS3PrincipalTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8d\x3d\xcb\x83\x30\x14\x85\xf7\xfc\x8a\x70\xe7\x57\x51\xdf\xa1\xe0\xe6\xd0\xbd\x54\xe8\x22\x0e\x21\x5c\x21\x90\x8f\x92\x9b\x56\x68\xf0\xbf\x37\x49\xb5\x5d\xce\xf0\x3c\xf7\x9c\x1b\x19\xe7\x70\x43\x4f\xca\x59\xe8\x39\x74\x4d\xdb\x55\x6d\x53\xb5\x27\xf8\xcb\x6a\x0c\x22\xa0\x41\x1b\x92\x9c\x12\xe0\x3c\x96\x4c\xea\xbc\x2c\x28\x33\x87\x41\x6b\xb7\x96\xfb\x22\x06\x19\x3e\x6b\xd3\x4e\x12\xa3\x40\xfd\x40\xf4\x30\x78\x75\x1a\x61\x17\xf3\xb7\x73\xf1\xca\x4a\x75\x17\x3a\xd5\xe2\xaf\x36\xa2\x7f\x2a\x89\xf9\x09\xfd\xd7\xc2\x88\x97\xb3\x62\xa5\x5a\x3a\x73\x6c\x6c\xec\xc8\x99\x6d\x8c\xbd\x03\x00\x00\xff\xff\x70\x95\x0f\xae\xd1\x00\x00\x00")

func assetsS3PolicyS3PrincipalTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3PolicyS3PrincipalTpl,
		"assets/s3/policy.s3-principal.tpl",
	)
}

func assetsS3PolicyS3PrincipalTpl() (*asset, error) {
	bytes, err := assetsS3PolicyS3PrincipalTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/policy.s3-principal.tpl", size: 209, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3PolicyS3RoTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x0a\x4b\x2d\x2a\xce\xcc\xcf\x53\xb2\x52\x50\x32\x32\x30\x34\xd2\x35\x34\xd0\x35\x34\x57\xd2\x01\x49\x05\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x00\x25\xa3\x81\x02\x0a\x0a\xd5\x60\x12\x28\xe5\x9a\x96\x96\x9a\x0c\x12\x57\x72\xcc\xc9\xc9\x2f\x07\xab\x07\x4b\x38\x26\x97\x40\x4c\x8b\x86\x8a\x00\xc5\x8a\x8d\xad\xdc\x53\x4b\xfc\x93\xb2\x40\x5a\x74\x50\xc4\x7d\x32\x8b\xa1\x12\xc5\x58\x64\x9c\x4a\x93\xb3\x53\xb1\x69\x01\x5a\xea\x5b\x09\x91\x2d\x56\x82\xca\xc6\xc2\xdd\x10\x94\x5a\x9c\x5f\x5a\x94\x9c\x8a\xea\x8a\xc4\xa2\x3c\xab\xc4\xf2\x62\x2b\xa0\x11\x56\x56\x2a\xd5\x49\x60\xdd\xf1\x79\x89\xb9\xa9\xb5\xc8\x36\xe0\x51\xa6\xaf\x05\xb7\x0b\x4c\xd7\x72\x81\x58\xb5\x5c\x80\x00\x00\x00\xff\xff\xe7\xb9\xca\xef\x48\x01\x00\x00")

func assetsS3PolicyS3RoTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3PolicyS3RoTpl,
		"assets/s3/policy.s3-ro.tpl",
	)
}

func assetsS3PolicyS3RoTpl() (*asset, error) {
	bytes, err := assetsS3PolicyS3RoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/policy.s3-ro.tpl", size: 328, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3PolicyS3RwTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x0a\x4b\x2d\x2a\xce\xcc\xcf\x53\xb2\x52\x50\x32\x32\x30\x34\xd2\x35\x34\xd0\x35\x34\x57\xd2\x01\x49\x05\x97\x24\x96\xa4\xe6\xa6\xe6\x95\x00\x25\xa3\x81\x02\x0a\x0a\xd5\x60\x12\x28\xe5\x9a\x96\x96\x9a\x0c\x12\x57\x72\xcc\xc9\xc9\x2f\x07\xab\x07\x4b\x38\x26\x97\x40\x4c\x8b\x86\x8a\x20\x80\x52\xb1\xb1\x95\x4b\x6a\x4e\x6a\x49\xaa\x7f\x52\x16\x48\xb7\x0e\x56\x25\xee\xa9\x25\x78\xe5\x7d\x32\x8b\xa1\x0a\x8a\xf1\xa8\x70\x2a\x4d\xce\x4e\xc5\x65\x44\x40\x29\xcc\x0a\xa8\x74\x2c\xdc\xfd\x41\xa9\xc5\xf9\xa5\x45\xc9\xa9\x28\x3e\x50\x4a\x2c\xca\xb3\x4a\x2c\x2f\xb6\x02\xea\xb5\xb2\x52\xa9\x4e\x02\x1b\x1e\x9f\x97\x98\x9b\x5a\x8b\x64\x05\x3e\x65\xfa\x5a\x70\xbb\xc0\x74\x2d\x17\x88\x55\xcb\x05\x08\x00\x00\xff\xff\x6b\xe2\x57\x5c\x84\x01\x00\x00")

func assetsS3PolicyS3RwTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3PolicyS3RwTpl,
		"assets/s3/policy.s3-rw.tpl",
	)
}

func assetsS3PolicyS3RwTpl() (*asset, error) {
	bytes, err := assetsS3PolicyS3RwTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/policy.s3-rw.tpl", size: 388, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3S3Tf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x5d\x6b\x14\x31\x14\x7d\xdf\x5f\x71\x09\x82\xb0\x0f\xb3\x85\x82\xe0\x43\x1f\x56\x47\xa5\x20\x2d\xd4\xea\x6b\xb8\xcd\xdc\x19\xc3\xa6\xc9\x78\x93\xac\x2d\x43\xfe\xbb\xc9\x7c\xd4\x5d\x29\xba\xd2\xfb\x94\x9c\x39\x1f\x37\x70\x66\xc5\xe4\x5d\x64\x45\x20\xf0\xa7\x97\xfe\x5c\xde\x45\xb5\xa3\x20\x40\x34\xd4\x62\x34\xf9\x34\xac\x20\xcf\x84\xc3\x05\x88\x61\xa8\xde\x8d\x97\x2b\xbc\xa7\x94\xaa\x7c\xff\xf8\xa3\xb1\x29\x89\x91\x88\xca\x14\x56\xcf\x7a\x8f\x81\x26\x6c\x18\x00\x74\x0b\xd6\x05\xa8\xbe\xda\x6f\xc4\x5e\x3b\x4b\x0d\xa4\x34\x7e\x06\xd8\x4f\x90\xb6\xdd\x1c\x57\x86\x2c\xde\x99\xcc\xba\x80\xc0\x91\x66\x78\x51\x6c\xd6\xeb\x85\xb8\x86\xda\xd9\xf0\x1a\x76\x44\x3d\x20\xbb\x68\x1b\x40\x63\xc0\x99\x66\x31\xf6\xd0\x3a\xa6\x7c\xf9\xad\xb9\xbd\xae\xaf\xe1\x1e\x77\x04\xe1\xbb\xf6\xa0\x9c\x6d\x75\x17\xb9\x44\x3e\x91\x36\xf3\xc9\xe8\x96\xd4\xa3\x32\x24\x39\x1a\x3a\x58\x11\xa0\x67\x6a\xf5\x43\x79\xf1\xe4\xb0\x11\x07\x1f\x9f\x7d\x41\x19\xeb\xac\x8a\xcc\x64\x83\x9c\x37\x94\x81\xd1\x7a\x1d\xf2\xf1\xc8\xbf\x4c\x83\x8f\x3e\x7b\x9c\x9f\xfd\x81\xfb\xe0\x18\x3b\x92\xca\xa0\x2f\x04\xf1\xe5\x76\x7b\x55\x6f\x6f\x6a\x79\xb9\x3d\x5c\x23\xbd\x34\xf9\xcd\x3f\x93\x3f\x7d\xde\xbe\xbf\xfc\x70\xf3\x1f\xa9\xf4\xd0\x6b\xc6\xbf\xa5\xbe\x3d\x7b\xc6\x2d\xad\x96\x46\x91\x1d\x0b\x94\x81\x95\x8b\xa1\x8f\x01\xc4\x54\x52\xc9\xd4\x65\xdb\xa9\xb9\x7b\x34\x91\xca\x86\xaf\x86\xa3\x86\x57\x73\xbf\xab\x89\x9c\xcb\x9b\x9e\x6c\x90\x4f\x15\x67\xe6\x91\xd2\xe6\x5f\xe2\x44\xa9\x6e\x46\xe5\xaf\x00\x00\x00\xff\xff\x3b\x6f\xd7\xb0\x82\x03\x00\x00")

func assetsS3S3TfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3S3Tf,
		"assets/s3/s3.tf",
	)
}

func assetsS3S3Tf() (*asset, error) {
	bytes, err := assetsS3S3TfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/s3.tf", size: 898, mode: os.FileMode(420), modTime: time.Unix(1480142195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Template_fileTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x8e\x31\x0a\x02\x31\x10\x45\xfb\x39\xc5\x30\xd8\x9a\xc6\xda\xb3\x2c\x31\x8c\x10\x9c\xdd\x0c\x93\xac\x8b\x2c\xb9\xbb\xc9\x16\x62\x95\x46\x6c\xff\x7b\xf0\xbe\x71\x4e\xab\x05\x46\x2a\x3c\xab\xf8\xc2\xd3\x3d\x0a\x13\x52\xbe\x9c\x2d\x11\xee\x80\xd8\x97\xc5\xcf\x8c\x57\x24\x4d\x12\xc3\xcb\x1d\xd4\x15\x15\x6a\xfc\xe9\x2d\x1f\x22\xe2\x6d\x0d\x0f\x2e\x53\xb7\x9b\x7c\xda\x1b\x72\x5f\x5b\xed\x7a\x85\x0a\x30\x0e\x6f\xc3\xf0\xf6\xb7\xb0\x5a\x5c\x42\x54\x2f\xa3\xfe\x47\xfa\xe5\x06\xbc\x03\x00\x00\xff\xff\x7f\x17\x29\xc9\x7a\x01\x00\x00")

func assetsS3Template_fileTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Template_fileTf,
		"assets/s3/template_file.tf",
	)
}

func assetsS3Template_fileTf() (*asset, error) {
	bytes, err := assetsS3Template_fileTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/template_file.tf", size: 378, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3TerraformTfstateBackup = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x6e\x85\x20\x10\x45\xf7\x7e\x85\x61\x2d\x46\x11\x6b\xe9\xaf\x18\x63\xa0\x0c\xad\x89\x8a\x19\xa0\x1b\xe3\xbf\x57\xa9\xf5\xc5\x97\x37\xab\xc9\x39\x77\x6e\x32\x6b\x92\xee\x43\x7e\x00\xdd\x60\x67\xf2\x91\x56\xd9\x1f\xf1\x80\x28\x8d\xc5\xa9\x7f\x38\x52\xe4\x4d\xce\xc9\x99\x70\x80\x83\x1c\x77\xcc\xca\x93\x8c\xc3\x0c\xf2\x0b\x8e\xa4\x34\x6f\xca\xe8\xa6\xa6\x82\x17\x15\xe5\x42\x30\x2a\x94\x62\xd4\x94\xf0\x5e\x73\xc5\x59\xa5\xe1\xbf\x68\xb2\x3a\x8c\xe0\xf6\xb3\x36\x82\x63\xd6\x6b\x8b\x91\x45\xfa\xef\x9b\xbf\x0c\x5a\xeb\xc9\x0d\x77\xd9\xfd\xd6\x06\xbf\x04\x7f\xd4\xaf\xdb\x93\x42\x70\x36\xe0\x27\xbc\x94\x1a\x16\x98\xb5\xeb\xe3\xeb\x6d\x77\xc9\x2d\x6e\x5d\xb2\x25\xbf\x01\x00\x00\xff\xff\x89\xb3\x11\xa3\x3d\x01\x00\x00")

func assetsS3TerraformTfstateBackupBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3TerraformTfstateBackup,
		"assets/s3/terraform.tfstate.backup",
	)
}

func assetsS3TerraformTfstateBackup() (*asset, error) {
	bytes, err := assetsS3TerraformTfstateBackupBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3/terraform.tfstate.backup", size: 317, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCommonFormterraManifest = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x57\x08\x28\xca\x4f\x29\x4d\x4e\x4d\x51\x48\xaa\x54\x48\xcb\x2f\xca\x2d\x49\x2d\x2a\x4a\x54\xa8\xae\x0e\x4b\x2d\x2a\xce\xcc\xcf\xab\xad\x55\xe0\x02\xaa\x72\x2c\x4a\x2f\xcd\x4d\xcd\x2b\x29\xb6\x02\x4a\x39\xfb\x78\x02\xf9\xc5\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x6e\x15\xb3\x6e\x40\x00\x00\x00")

func assetsCommonFormterraManifestBytes() ([]byte, error) {
	return bindataRead(
		_assetsCommonFormterraManifest,
		"assets/common/.formterra.manifest",
	)
}

func assetsCommonFormterraManifest() (*asset, error) {
	bytes, err := assetsCommonFormterraManifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/common/.formterra.manifest", size: 64, mode: os.FileMode(420), modTime: time.Unix(1480181656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsCommonMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x91\x41\x6f\xd4\x30\x10\x85\xcf\xeb\x5f\x31\x6a\x73\x48\x2a\xdc\xbd\xa7\x8a\xd0\x0a\xb5\x50\x41\x01\xb5\x15\x12\xa7\xca\xc4\xe3\xae\x45\x62\x87\xb1\xb3\x68\xff\x3d\xe3\x24\xec\x26\xbb\x70\x9c\xf1\x9b\xe7\x6f\xde\x5c\xc2\xbd\x81\xb8\x45\x42\xb0\x01\x14\x44\x24\x52\xc6\x53\x7b\x1d\xcd\x4e\x51\x10\x97\xd0\x07\x64\x85\x8a\xa0\xc2\xf1\x19\xac\xeb\xfa\xc8\xaf\xa4\xd2\x74\x12\x38\xd0\xd8\xa1\xd3\xe0\x1d\xa0\xdb\x59\xf2\xae\x45\x17\x81\x6d\xac\xfa\xd1\x60\x00\x4f\xc9\x8c\xa6\xd9\xe7\xbb\x97\x6f\x9b\xc7\x97\xcd\xe3\xfb\x27\x78\x5b\x09\x6b\x1c\xfe\x82\x3c\xcb\x7f\xdb\x46\xd7\x8a\x34\x64\xf9\x24\xb9\xbb\xff\x74\x5b\x14\x6f\x8a\xf9\x48\x25\x25\x1b\x4b\x63\x1b\xac\x96\x42\xc1\x0c\xd6\x88\x24\x4e\xf5\x53\x35\xb3\xbc\xe2\xb5\x0a\x21\xae\xbf\x7e\xf8\xf2\xf9\x7b\x09\x5d\xc3\xd4\x84\x86\x30\x6c\x41\x75\x5d\xb3\x87\xba\x41\xee\xb1\xe4\xb0\x6a\x39\x82\x0c\x5e\x85\x58\x1d\x23\x78\xc5\x08\x52\xf6\x9d\x56\x11\xc5\x8a\x5b\x60\x79\x35\xc8\xb2\xbc\x09\x70\x9c\x5f\xb7\x5e\xf7\xbc\xfe\xfa\x6a\xfd\xa0\x7e\x62\x22\x2e\x6e\x40\x7b\xb0\x15\x4b\xb5\x25\xa7\x5a\xe4\x29\xcb\x5d\xac\xb7\x1e\x2e\x9e\x69\x6f\xdd\x2b\xb4\xac\x1e\x0d\xed\xc5\xcd\x58\xc9\x77\xa9\x4a\xd3\x0e\x85\x48\xf8\x0b\xba\xd9\xaf\x73\xd0\x61\x4d\xe9\xfb\xb8\x38\xef\xd0\x3d\x44\x97\x32\xe5\x64\xa6\x30\xca\xf9\xf8\xdf\x80\x4e\xb5\xa7\x66\xff\x47\xc9\xf2\x87\xcd\xc7\xdb\x62\x00\x11\x62\x08\xba\x3c\x63\x99\x7f\x39\xde\xe2\x4c\x21\x86\xeb\x2c\xe0\x34\x86\x48\x7e\x0f\x92\xab\x1a\x4f\x19\x57\xac\x90\x64\x16\x30\x53\x6b\x6e\x1e\xe2\x70\xc2\x7f\xbc\x8c\xdf\x8a\x3f\x01\x00\x00\xff\xff\x07\xe2\xe8\x72\x27\x03\x00\x00")

func assetsCommonMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsCommonMakefile,
		"assets/common/Makefile",
	)
}

func assetsCommonMakefile() (*asset, error) {
	bytes, err := assetsCommonMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/common/Makefile", size: 807, mode: os.FileMode(420), modTime: time.Unix(1480104151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/module_client.tf": assetsModule_clientTf,
	"assets/project/project.tf": assetsProjectProjectTf,
	"assets/project/terraform.tfvars.example": assetsProjectTerraformTfvarsExample,
	"assets/s3/iam_role.tf": assetsS3Iam_roleTf,
	"assets/s3/iam_user.tf": assetsS3Iam_userTf,
	"assets/s3/policy.s3-principal.tpl": assetsS3PolicyS3PrincipalTpl,
	"assets/s3/policy.s3-ro.tpl": assetsS3PolicyS3RoTpl,
	"assets/s3/policy.s3-rw.tpl": assetsS3PolicyS3RwTpl,
	"assets/s3/s3.tf": assetsS3S3Tf,
	"assets/s3/template_file.tf": assetsS3Template_fileTf,
	"assets/s3/terraform.tfstate.backup": assetsS3TerraformTfstateBackup,
	"assets/common/.formterra.manifest": assetsCommonFormterraManifest,
	"assets/common/Makefile": assetsCommonMakefile,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"common": &bintree{nil, map[string]*bintree{
			".formterra.manifest": &bintree{assetsCommonFormterraManifest, map[string]*bintree{}},
			"Makefile": &bintree{assetsCommonMakefile, map[string]*bintree{}},
		}},
		"module_client.tf": &bintree{assetsModule_clientTf, map[string]*bintree{}},
		"project": &bintree{nil, map[string]*bintree{
			"project.tf": &bintree{assetsProjectProjectTf, map[string]*bintree{}},
			"terraform.tfvars.example": &bintree{assetsProjectTerraformTfvarsExample, map[string]*bintree{}},
		}},
		"s3": &bintree{nil, map[string]*bintree{
			"iam_role.tf": &bintree{assetsS3Iam_roleTf, map[string]*bintree{}},
			"iam_user.tf": &bintree{assetsS3Iam_userTf, map[string]*bintree{}},
			"policy.s3-principal.tpl": &bintree{assetsS3PolicyS3PrincipalTpl, map[string]*bintree{}},
			"policy.s3-ro.tpl": &bintree{assetsS3PolicyS3RoTpl, map[string]*bintree{}},
			"policy.s3-rw.tpl": &bintree{assetsS3PolicyS3RwTpl, map[string]*bintree{}},
			"s3.tf": &bintree{assetsS3S3Tf, map[string]*bintree{}},
			"template_file.tf": &bintree{assetsS3Template_fileTf, map[string]*bintree{}},
			"terraform.tfstate.backup": &bintree{assetsS3TerraformTfstateBackup, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

