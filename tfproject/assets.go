// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/module_client.tf
// assets/project.tf
// assets/s3.tf
// DO NOT EDIT!

package tfproject

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x91\xcd\x6e\x9c\x30\x10\xc7\xcf\xeb\xa7\x18\xa5\x1c\x20\xaa\xb3\xf7\x8d\x50\xb5\xaa\x92\x2a\x6a\x73\x49\xa2\x5e\x23\x17\x8f\xb3\x56\xc1\xa6\x63\x93\x6a\xdf\xbe\x63\x40\x59\xc3\x6e\x8f\x33\xfe\xfd\x3f\x06\xc4\x27\x78\x30\x10\x0f\x48\x08\x36\x80\x82\x88\x44\xca\x78\xea\x6e\xa2\x79\x57\x14\x18\x18\x02\x32\xa1\x22\xa8\x70\x7a\x06\xeb\xfa\x21\xf2\x2b\xa9\xa4\x4e\x80\x03\x8d\x3d\x3a\x0d\xde\x01\xba\x77\x4b\xde\x75\xe8\x22\xb0\x8d\x55\xbf\x5a\x0c\xe0\x29\x99\xd1\xac\x7d\xb9\x7f\xfd\xb9\x7f\x7a\xdd\x3f\x7d\x7b\x86\x2f\xb5\xb0\xc6\xe1\x1f\x28\x8b\xf2\xaf\x6d\x75\xa3\x48\x43\x51\xce\xc8\xfd\xc3\x8f\xbb\xaa\xfa\x5c\xe5\x92\x5a\x4a\x36\x96\xc6\xb6\x58\x2f\x41\xc1\x1d\xac\x11\x09\x4e\xf3\x73\x9d\x59\x5e\xf3\x59\x95\x10\x37\x1f\x77\xec\xa6\x94\x11\xac\xc4\xe6\x74\xdf\x1b\x46\x90\x72\xe8\xb5\x8a\x28\x36\xbc\x02\xcb\xbd\xa1\x28\xca\x36\xc0\x49\xbf\xed\xbc\x1e\xf8\xb6\xed\xf5\xf6\x51\xfd\xc6\x54\xa7\xba\x05\xed\xc1\xd6\x8c\x6a\x4b\x4e\x75\xc8\x2a\xcb\x5b\x6c\x0e\x1e\xae\x5e\xe8\x68\xdd\x1b\x74\x4c\x4f\x86\xf6\xea\x76\x9a\xe4\xd7\x34\x25\xb5\x43\x21\xfa\x56\xb9\x45\xbb\x2c\x35\x2f\x9a\x38\x90\x7e\x88\x8b\x7f\x37\x6e\x3f\xbe\x4b\xfa\x60\x7c\x36\xa1\x21\x0c\x87\x5d\x2e\x9f\x77\x6b\x76\xed\xf5\xff\x26\x45\xf9\xb8\xff\x7e\x57\x8d\x3d\x84\x50\x7d\xdf\x1e\x77\x67\x55\xf2\xc4\x11\x39\x27\x44\xd3\x22\xe7\xe4\xa4\xc6\x10\xc9\x1f\x41\xf2\xd4\xe0\xba\xe2\x86\x09\x49\x66\x51\x66\x5e\xe5\xe6\x21\x8e\x7f\xf0\xc2\xcb\x14\x3b\x87\x5c\x0c\x5e\x25\xfe\x0b\x00\x00\xff\xff\xd0\x6a\xf6\x1c\x2e\x03\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 814, mode: os.FileMode(420), modTime: time.Unix(1472504225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModule_clientTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\xc1\xca\xc2\x30\x10\x84\xef\x7d\x8a\x21\xf4\xbf\xfd\xf4\x01\x84\x9e\xc5\x8b\x88\xa0\xf7\xd5\x6e\x6b\xb0\x49\x43\x92\x1e\x64\xc9\xbb\xbb\x35\x08\xde\x86\x9d\xe1\xfb\x56\x04\x03\x8f\xd6\x33\x8c\x5b\x86\x75\x66\x53\x4a\xd3\xd4\x08\x23\xd2\x1d\xc9\x71\x29\x06\xd2\x00\x69\x59\xe3\x9d\xd1\x7f\x8a\xcb\xf9\xa0\x77\xbd\x2a\x22\x92\x9f\x18\xed\x93\x5f\xff\x68\x1d\x85\x60\xfd\x84\x5d\x8f\x6e\xcf\xf9\x4a\xd1\xd2\x6d\xe6\x04\x25\x6f\xeb\xef\xa0\xd3\xa6\xd2\x2b\x31\x44\xeb\xf3\x08\xd3\xca\x5f\x52\xe1\xef\xec\x44\xf9\xa1\x32\x35\xb1\x1f\x36\x8e\xfe\x28\xa2\x59\xe3\x3b\x00\x00\xff\xff\x66\xe6\x33\x70\xc2\x00\x00\x00")

func assetsModule_clientTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsModule_clientTf,
		"assets/module_client.tf",
	)
}

func assetsModule_clientTf() (*asset, error) {
	bytes, err := assetsModule_clientTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/module_client.tf", size: 194, mode: os.FileMode(420), modTime: time.Unix(1478809663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsProjectTf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe2\xaa\xae\x56\x28\x4a\xcc\x4b\x4f\x55\x50\xc9\x4e\xad\xd4\x51\x50\x29\x4b\x2c\x52\xb0\xb2\x55\xd0\x73\x4f\x2d\x71\xcc\xc9\x09\x4b\x2c\x2a\xae\xad\xe5\x02\x0a\x66\x26\x26\xe5\xa4\x2a\x28\x55\x57\x83\x54\xe8\x01\xc5\xfd\x12\x73\x53\x6b\x6b\x95\x14\xaa\x15\x6a\x41\x86\xa4\xe6\xa5\x28\x00\x55\x82\x00\xba\x91\xb9\xf9\x29\xa5\x40\xbd\x20\x53\x7d\xc1\xcc\x62\x90\xca\xea\xea\x92\xd4\xdc\x82\x9c\xc4\x12\xa0\xa9\x10\x15\x4a\x30\xa5\xb5\xc8\x26\x02\x02\x00\x00\xff\xff\x31\x78\x14\x18\xa2\x00\x00\x00")

func assetsProjectTfBytes() ([]byte, error) {
	return bindataRead(
		_assetsProjectTf,
		"assets/project.tf",
	)
}

func assetsProjectTf() (*asset, error) {
	bytes, err := assetsProjectTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/project.tf", size: 162, mode: os.FileMode(420), modTime: time.Unix(1478814874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Tf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x5d\x6b\x14\x31\x14\x7d\x9f\x5f\x71\x09\x82\xb0\x0f\xbb\x85\x82\xe0\x43\x1f\x56\x47\xa5\x20\x2d\xd4\xea\x6b\xb8\xcd\xdc\x19\xc3\xa6\xc9\x78\x93\xac\x2d\x43\xfe\xbb\xc9\x7c\xd4\x5d\x29\xba\xd2\xfb\x94\x9c\x39\x1f\x37\x70\xa6\xaa\x98\xbc\x8b\xac\x08\x04\xfe\xf4\xd2\x9f\xcb\xbb\xa8\x76\x14\x04\x88\x86\x5a\x8c\x26\x9f\x86\x0a\xf2\x4c\x38\x5c\x80\x18\x86\xf5\xbb\xf1\x72\x85\xf7\x94\xd2\x26\xdf\x3f\xfe\x68\x6c\x4a\x62\x24\xa2\x32\x85\xd5\xb3\xde\x63\xa0\x09\x1b\x06\x00\xdd\x82\x75\x01\xd6\x5f\xed\x37\x62\xaf\x9d\xa5\x06\x52\x1a\x3f\x03\xec\x27\x48\xdb\x6e\x8e\x2b\x43\x16\xef\x4c\x66\x5d\x40\xe0\x48\x33\xbc\x28\x36\xab\xd5\x42\x5c\x41\xed\x6c\x78\x0d\x3b\xa2\x1e\x90\x5d\xb4\x0d\xa0\x31\xe0\x4c\xb3\x18\x7b\x68\x1d\x53\xbe\xfc\xd6\xdc\x5e\xd7\xd7\x70\x8f\x3b\x82\xf0\x5d\x7b\x50\xce\xb6\xba\x8b\x5c\x22\x9f\x48\x9b\xf9\x64\x74\x4b\xea\x51\x19\x92\x1c\x0d\x1d\xac\x08\xd0\x33\xb5\xfa\xa1\xbc\x78\x72\xd8\x88\x83\x8f\xcf\xbe\xa0\x8c\x75\x56\x45\x66\xb2\x41\xce\x1b\xca\xc0\x68\xbd\x0e\xf9\x78\xe4\x5f\xa6\xc1\x47\x9f\x3d\xce\xcf\xfe\xc0\x7d\x70\x8c\x1d\x49\x65\xd0\x17\x82\xf8\x72\xbb\xbd\xaa\xb7\x37\xb5\xbc\xdc\x1e\xae\x91\x5e\x9a\xfc\xe6\x9f\xc9\x9f\x3e\x6f\xdf\x5f\x7e\xb8\xf9\x8f\x54\x7a\xe8\x35\xe3\xdf\x52\xdf\x9e\x3d\xe3\x96\xaa\xa5\x51\x64\xc7\x02\x65\xa0\x72\x31\xf4\x31\x80\x98\x4a\x2a\x99\xba\x6c\x3b\x35\x77\x8f\x26\x52\xd9\xf0\xd5\x70\xd4\xf0\xf5\xdc\xef\xf5\x44\xce\xe5\x4d\x4f\x36\xc8\xa7\x8a\x33\xf3\x48\x69\xf3\x2f\x71\xa2\x54\x37\xa3\xf2\x57\x00\x00\x00\xff\xff\xf7\xb8\x8a\x56\x83\x03\x00\x00")

func assetsS3TfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Tf,
		"assets/s3.tf",
	)
}

func assetsS3Tf() (*asset, error) {
	bytes, err := assetsS3TfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3.tf", size: 899, mode: os.FileMode(420), modTime: time.Unix(1472504225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/module_client.tf": assetsModule_clientTf,
	"assets/project.tf": assetsProjectTf,
	"assets/s3.tf": assetsS3Tf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"module_client.tf": &bintree{assetsModule_clientTf, map[string]*bintree{}},
		"project.tf": &bintree{assetsProjectTf, map[string]*bintree{}},
		"s3.tf": &bintree{assetsS3Tf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

