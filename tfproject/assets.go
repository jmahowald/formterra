// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/s3.tf
// DO NOT EDIT!

package tfproject

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x91\xcd\x6e\x9c\x30\x10\xc7\xcf\xeb\xa7\x18\xa5\x1c\x20\xaa\xb3\xf7\x8d\x50\xb5\xaa\x92\x2a\x6a\x73\x49\xa2\x5e\x23\x17\x8f\xb3\x56\xc1\xa6\x63\x93\x6a\xdf\xbe\x63\x40\x59\xc3\x6e\x8f\x33\xfe\xfd\x3f\x06\xc4\x27\x78\x30\x10\x0f\x48\x08\x36\x80\x82\x88\x44\xca\x78\xea\x6e\xa2\x79\x57\x14\x18\x18\x02\x32\xa1\x22\xa8\x70\x7a\x06\xeb\xfa\x21\xf2\x2b\xa9\xa4\x4e\x80\x03\x8d\x3d\x3a\x0d\xde\x01\xba\x77\x4b\xde\x75\xe8\x22\xb0\x8d\x55\xbf\x5a\x0c\xe0\x29\x99\xd1\xac\x7d\xb9\x7f\xfd\xb9\x7f\x7a\xdd\x3f\x7d\x7b\x86\x2f\xb5\xb0\xc6\xe1\x1f\x28\x8b\xf2\xaf\x6d\x75\xa3\x48\x43\x51\xce\xc8\xfd\xc3\x8f\xbb\xaa\xfa\x5c\xe5\x92\x5a\x4a\x36\x96\xc6\xb6\x58\x2f\x41\xc1\x1d\xac\x11\x09\x4e\xf3\x73\x9d\x59\x5e\xf3\x59\x95\x10\x37\x1f\x77\xec\xa6\x94\x11\xac\xc4\xe6\x74\xdf\x1b\x46\x90\x72\xe8\xb5\x8a\x28\x36\xbc\x02\xcb\xbd\xa1\x28\xca\x36\xc0\x49\xbf\xed\xbc\x1e\xf8\xb6\xed\xf5\xf6\x51\xfd\xc6\x54\xa7\xba\x05\xed\xc1\xd6\x8c\x6a\x4b\x4e\x75\xc8\x2a\xcb\x5b\x6c\x0e\x1e\xae\x5e\xe8\x68\xdd\x1b\x74\x4c\x4f\x86\xf6\xea\x76\x9a\xe4\xd7\x34\x25\xb5\x43\x21\xfa\x56\xb9\x45\xbb\x2c\x35\x2f\x9a\x38\x90\x7e\x88\x8b\x7f\x37\x6e\x3f\xbe\x4b\xfa\x60\x7c\x36\xa1\x21\x0c\x87\x5d\x2e\x9f\x77\x6b\x76\xed\xf5\xff\x26\x45\xf9\xb8\xff\x7e\x57\x8d\x3d\x84\x50\x7d\xdf\x1e\x77\x67\x55\xf2\xc4\x11\x39\x27\x44\xd3\x22\xe7\xe4\xa4\xc6\x10\xc9\x1f\x41\xf2\xd4\xe0\xba\xe2\x86\x09\x49\x66\x51\x66\x5e\xe5\xe6\x21\x8e\x7f\xf0\xc2\xcb\x14\x3b\x87\x5c\x0c\x5e\x25\xfe\x0b\x00\x00\xff\xff\xd0\x6a\xf6\x1c\x2e\x03\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 814, mode: os.FileMode(420), modTime: time.Unix(1472243809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsS3Tf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\x5f\x6b\x14\x31\x10\x7f\xdf\x4f\x31\x04\x41\xb8\x87\xbb\x42\x41\xf0\xa1\x0f\xa7\xab\x52\x90\x16\x6a\xf5\x35\x4c\xb3\xb3\x6b\xb8\x34\x59\x27\xc9\xd9\xb2\xe4\xbb\x9b\xec\x9f\x7a\x27\x45\x4f\x3a\x2f\x9b\x99\xfc\xfe\x4c\xe0\xb7\x55\xc5\xe4\x5d\x64\x45\x20\xf0\xa7\x97\xfe\x5c\xde\x45\xb5\xa3\x20\x40\x34\xd4\x62\x34\xf9\x34\x54\x90\x6b\x9a\xc3\x05\x88\x61\x58\xbf\x1b\x9b\x2b\xbc\xa7\x94\x36\xb9\xff\xf8\xa3\xb1\x29\x89\x11\x88\xca\x14\x54\xcf\x7a\x8f\x81\xa6\xd9\x30\x00\xe8\x16\xac\x0b\xb0\xfe\x6a\xbf\x11\x7b\xed\x2c\x35\x90\xd2\x78\x0d\xb0\x9f\x46\xda\x76\xb3\x5d\x29\xb2\x78\x67\x32\xea\x02\x02\x47\x9a\xc7\x0b\x63\xb3\x5a\x2d\xc0\x15\xd4\xce\x86\xd7\xb0\x23\xea\x01\xd9\x45\xdb\x00\x1a\x03\xce\x34\x8b\xb0\x87\xd6\x31\xe5\xe6\x37\xe7\xf6\xba\xbe\x86\x7b\xdc\x11\x84\xef\xda\x83\x72\xb6\xd5\x5d\xe4\x62\xf9\x04\xda\xcc\x27\xa3\x5b\x52\x8f\xca\x90\xe4\x68\xe8\x60\x45\x80\x9e\xa9\xd5\x0f\xe5\xc5\x93\xc2\x46\x1c\x5c\x3e\xfb\x82\x52\xd6\x59\x15\x99\xc9\x06\x39\x6f\x28\x03\xa3\xf5\x3a\xe4\xe3\x91\x7e\xa9\x06\x1f\x7d\xd6\x38\x3f\xfb\x63\xee\x83\x63\xec\x48\x2a\x83\xbe\x00\xc4\x97\xdb\xed\x55\xbd\xbd\xa9\xe5\xe5\xf6\x70\x8d\xf4\x52\xe7\x37\xff\x74\xfe\xf4\x79\xfb\xfe\xf2\xc3\xcd\x7f\xb8\xd2\x43\xaf\x19\xff\xe6\xfa\xf6\xec\x19\xb5\xe5\xbb\xe4\x8a\xec\x18\xa3\x54\x55\x95\x8b\xa1\x8f\x01\xc4\x14\x55\xc9\xd4\x65\xf1\x29\xbf\x7b\x34\x91\xca\x9e\xaf\x86\xa3\x9c\xaf\xe7\x94\xaf\x27\x70\x8e\x70\x7a\x92\x41\x3e\x95\x9c\x91\x47\x4c\x9b\x7f\x8c\x13\xa9\xba\x19\x99\xbf\x02\x00\x00\xff\xff\xad\xdf\x99\x83\x89\x03\x00\x00")

func assetsS3TfBytes() ([]byte, error) {
	return bindataRead(
		_assetsS3Tf,
		"assets/s3.tf",
	)
}

func assetsS3Tf() (*asset, error) {
	bytes, err := assetsS3TfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/s3.tf", size: 905, mode: os.FileMode(420), modTime: time.Unix(1472227085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/s3.tf": assetsS3Tf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"s3.tf": &bintree{assetsS3Tf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

